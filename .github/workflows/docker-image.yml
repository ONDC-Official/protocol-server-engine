name: Igm Mock Staging Deployment

on:
  push:
    branches: ["master"]
  workflow_dispatch:
  
jobs:
  ssh-ec2:
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_RSF }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.RSF_SSH_HOST }} >> ~/.ssh/known_RSF_SSH_HOSTs

          ssh -i ./key.pem ${{ secrets.RSF_SSH_USER }}@${{ secrets.RSF_SSH_HOST }} -T <<EOF
          REPO_DIR=~/mock/Protocol-Server-SDK-igm-staging/protocol-server-engine
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from main branch"
          git clone --single-branch --branch master https://github.com/ONDC-Official/protocol-server-engine.git \$REPO_DIR
          EOF

      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.RSF_SSH_USER }}@${{ secrets.RSF_SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF

      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.RSF_SSH_USER }}@${{ secrets.RSF_SSH_HOST }} <<EOF
          REPO_DIR=~/mock/Protocol-Server-SDK-igm-staging/protocol-server-engine
          echo "Writing environment variables to .env file"
          
          echo "private_key=${{ secrets.PRIVATE_KEY }}" >> \$REPO_DIR/.env
          echo "PORT=${{ vars.PORT }}" >> \$REPO_DIR/.env
          echo "BUSINESS_SERVER_IS_SYNC=${{ vars.BUSINESS_SERVER_IS_SYNC }}" >> \$REPO_DIR/.env
          echo "IS_VERIFY_AUTH=${{ vars.IS_VERIFY_AUTH }}" >> \$REPO_DIR/.env
          echo "SERVER_TYPE=${{ vars.SERVER_TYPE }}" >> \$REPO_DIR/.env
          
          echo "SUBSCRIBER_URL=${{ vars.SUBSCRIBER_URL }}" >> \$REPO_DIR/.env
          echo "BACKEND_SERVER_URL=${{ vars.BACKEND_SERVER_URL }}" >> \$REPO_DIR/.env
          echo "GATEWAY_URL=${{ vars.GATEWAY_URL }}" >> \$REPO_DIR/.env
          echo "PROTOCOL_SERVER=${{ vars.PROTOCOL_SERVER }}" >> \$REPO_DIR/.env
          
          echo "localConfig=${{ vars.localConfig }}" >> \$REPO_DIR/.env
          echo "USE_DB=${{ vars.USE_DB }}" >> \$REPO_DIR/.env
          echo "SUBSCRIBER_ID=${{ vars.SUBSCRIBER_ID }}" >> \$REPO_DIR/.env
          echo "SUBSCRIBER_UNIQUE_KEY=${{ vars.SUBSCRIBER_UNIQUE_KEY }}" >> \$REPO_DIR/.env
                  
          EOF

      - name: Verify .env and docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.RSF_SSH_USER }}@${{ secrets.RSF_SSH_HOST }} <<EOF
          REPO_DIR=~/mock/Protocol-Server-SDK-igm-staging/protocol-server-engine
          # Check if .env and docker-compose.yml files exist
          if [ ! -f \$REPO_DIR/.env ]; then
            echo ".env file not found in \$REPO_DIR!"
            exit 1
          fi
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF


      - name: Igm Protocol Server Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.RSF_SSH_USER }}@${{ secrets.RSF_SSH_HOST }} <<EOF
          REPO_DIR=~/mock/Protocol-Server-SDK-igm-staging
          echo "PROTOCOL_SERVER_ENGINE_PORT=5203" >> \$REPO_DIR/.env

          cd \$REPO_DIR

          # Ensure the .env and docker-compose.yml files exist
          if [ ! -f .env ]; then
            echo ".env file not found!"
            exit 1
          fi

          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi

          # Start the containers using Docker Compose
          echo "Running docker-compose up  -d --build"
          sudo docker compose -p igm-mock-staging up protocol-server-engine -d --build
          EOF
